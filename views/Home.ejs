<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="title" content="Careflex - Post-Surgery Recovery Monitoring">
    <meta name="description" content="Matrudaya is a platform for monitoring post-surgery recovery, providing real-time health insights and alerts for new mothers.">

    <link rel="stylesheet" href="/css/Home.css">
    <title>Document</title>
</head>

<body>
 <header>
        <nav>
            <div class="logo">CareFlex</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#features">Features</a></li>
              
            </ul>
            <button class="mobile-menu-toggle">â˜°</button>
            <a href="#login" class="login-btn">Login</a>
        </nav>
    </header>
/
    <main>
        <section class="hero" id="home">
            <div class="hero-content">
                <div class="hero-text">
                    <h1 class="hero-title">Because Every Mother Deserves Safe Care</h1>
                    <p class="hero-subtitle">Supporting safe motherhood through trust and technology.</p>
                    <a href="#login" class="cta-button">Get Started</a>
                </div>
            </div>
        </section>
    </main>

  <div class="why-careflex" id="features">
     <div class="header-why-careflex">
        <h1>Why CareFlex ??</h1>
    </div>
    
    <div class="cards-container">
        <div class="card monitoring">
            <div class="icon-container">
                <div class="icon">ðŸ’»</div>
            </div>
            <h3>Smart<br>Monitoring</h3>
            <p>Track vital maternal health in real time for proactive and safer care.</p>
        </div>
        
        <div class="card recovery">
            <div class="icon-container">
                <div class="icon">ðŸ¤–</div>
            </div>
            <h3>Recovery<br>Assistance</h3>
            <p>AI chatbot support with tips, reminders, and recovery guidance.</p>
        </div>
        
        <div class="card alerts">
            <div class="icon-container">
                <div class="icon">ðŸš¨</div>
            </div>
            <h3>Instant<br>Alerts</h3>
            <p>Immediate doctor notifications for critical health conditions.</p>
        </div>
        
        <div class="card reports">
            <div class="icon-container">
                <div class="icon">ðŸ“Š</div>
            </div>
            <h3>Reports</h3>
            <p>Clear health reports to aid better medical decisions.</p>
        </div>
    </div>
  </div>

  <div class="steps-careflex">
 <div class="steps">
        <h1 class="section-title">How It Works</h1>
        
        <div class="process-flow">
            <div class="step">
                <div class="step-number">1</div>
                <h3 class="step-title">Doctor Registers</h3>
                <p class="step-description">Creates an account and gets a unique key.</p>
            </div>
            
            <div class="arrow">â†’</div>
            
            <div class="step">
                <div class="step-number">2</div>
                <h3 class="step-title">Patient Joins</h3>
                <p class="step-description">Uses doctor's key to sign up securely.</p>
            </div>
            
            <div class="arrow">â†’</div>
            
            <div class="step">
                <div class="step-number">3</div>
                <h3 class="step-title">Smart Monitoring & Chatbots</h3>
                <p class="step-description">Continuous health tracking with AI recovery guidance.</p>
            </div>
            
            <div class="arrow">â†’</div>
            
            <div class="step">
                <div class="step-number">4</div>
                <h3 class="step-title">Alerts & Reports</h3>
                <p class="step-description">Doctors receive instant alerts + detailed health reports.</p>
            </div>
        </div>
    </div>
  </div>

  <div class="what-careflex" id="about">
    <div class="container-what-careflex">
    <!-- Circle with Belt Image -->
    <div class="image-circle">
      <img src="../Images/belt.png" alt="CareFlex Belt">
    </div>

    <!-- Text Content -->
    <div class="content">
      <h2>What is CareFlex??</h2>
      <p>
        CareFlex is an AI-powered maternal care platform that connects doctors and mothers through real-time monitoring, smart recovery assistance, and instant alerts. Designed with compassion and technology, it ensures safer motherhood and better medical decisions.
      </p>
    </div>
  </div>
  </div>

<div class="help">
  <!-- For Doctors -->
  <div class="section">
    <img src="../Images/doctor.png" alt="Doctor">
    <div class="text">
      <h2>For Doctors</h2>
      <p>
        Access real-time maternal health data, receive instant alerts, and generate detailed reports for smarter care.
      </p>
    </div>
  </div>

  <!-- For Mothers -->
  <div class="section">
    <div class="text">
      <h2>For Mothers</h2>
      <p>
        Get personalized recovery guidance, reminders, and health tracking support at every stage of motherhood.
      </p>
    </div>
    <img src="../Images/mother.png" alt="Mother with Baby">
  </div>

  <!-- For Families -->
  <div class="section">
    <img src="../Images/family.png" alt="Family">
    <div class="text">
      <h2>For Families</h2>
      <p>
        Stay informed and assured with timely updates and insights, creating a stronger support system for mothers.
      </p>
    </div>
  </div>
</div>
<!-- Intro message -->
  <div class="intro">
    <p>
      We believe every mother deserves safe, timely, and compassionate care. 
      Matrubandh combines AI innovation with medical expertise to create a stronger 
      bond between mothers and doctors.
    </p>
  </div>

  <!-- Contact Section -->
  <div class="contact">
    <h2>Contact Us!!!</h2>
    <form>
      <div class="form-group">
        <input type="email" placeholder="Email" required>
      </div>
      <div class="form-group">
        <textarea placeholder="Message" required></textarea>
      </div>
      <button type="submit" class="send-btn">
        <!-- Paper Plane Icon (SVG) -->
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
        </svg>
      </button>
    </form>
  </div>


  
<script>
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth'
            });
        }
    });
});

const loginBtn = document.querySelector('.login-btn');
loginBtn.addEventListener('click', (e) => {
    e.preventDefault(); 
     window.location.href = "/login";  // redirect to login page
});
const loginBt = document.querySelector('.cta-button');
loginBt.addEventListener('click', (e) => {
    e.preventDefault(); 
     window.location.href = "/login/patientdata";  // redirect to login page
});

  // Simple mobile menu toggle functionality
        const mobileToggle = document.querySelector('.mobile-menu-toggle');
        const navLinks = document.querySelector('.nav-links');

        mobileToggle.addEventListener('click', () => {
            navLinks.style.display = navLinks.style.display === 'flex' ? 'none' : 'flex';
            if (navLinks.style.display === 'flex') {
                navLinks.style.position = 'absolute';
                navLinks.style.top = '100%';
                navLinks.style.left = '0';
                navLinks.style.right = '0';
                navLinks.style.background = 'white';
                navLinks.style.flexDirection = 'column';
                navLinks.style.padding = '1rem';
                navLinks.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
            }
        });

        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth'
                    });
                }
            });
        });

chtbtn = document.querySelector("#forchatbot");
chatbot = document.querySelector(".chat-widget");
cross = document.querySelector("#cross");

chtbtn.addEventListener("click" ,() =>{
      chtbtn.style.display = "none";
      chatbot.style.display = "flex";
})

cross.addEventListener("click" ,() =>{
      chtbtn.style.display = "flex";
      chatbot.style.display = "none";
})

function addMessage(text, isBot) {
    const messagesContainer = document.querySelector('.messages-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isBot ? 'bot' : 'user'}`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.textContent = text;
    
    messageDiv.appendChild(messageContent);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Function to add typing indicator
function addTypingIndicator() {
    const messagesContainer = document.querySelector('.messages-container');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'typing-indicator';
    
    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'typing-dot';
        typingDiv.appendChild(dot);
    }
    
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return typingDiv;
}

// Function to remove typing indicator
function removeTypingIndicator(typingIndicator) {
    if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.parentNode.removeChild(typingIndicator);
    }
}

// Handle send message
async function handleSend() {
    const input = document.querySelector('.chat-input');
    const sendButton = document.querySelector('.send-button');
    const text = input.value.trim();
    
    if (!text) return;
    
    // Add user message to chat
    addMessage(text, false);
    input.value = '';
    sendButton.disabled = true;
    
    // Show typing indicator
    const typingIndicator = addTypingIndicator();
    
    try {
        const response = await fetch('http://localhost:5500/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: text })
            
            
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("Received response:", data); // Debug log
        
        // Remove typing indicator
        removeTypingIndicator(typingIndicator);
        

        

        // Check the structure of your API response
        const botResponse = data.reply || data.message || data.response || data;
        
        if (typeof botResponse === 'string') {
            addMessage(botResponse, true);
        } else if (typeof botResponse === 'object') {
            addMessage(JSON.stringify(botResponse), true);
        } else {
            addMessage("Received response in unexpected format", true);
        }
        
    } catch (error) {
        console.error("Error details:", error); // Debug log
        removeTypingIndicator(typingIndicator);
        addMessage("I apologize, but I'm having trouble at the moment. Please try again later.", true);
    }
    
    sendButton.disabled = false;
}

// Initialize the chat interface
document.addEventListener('DOMContentLoaded', () => {
    const input = document.querySelector('.chat-input');
    const sendButton = document.querySelector('.send-button');
    
    // Enable/disable send button based on input
    input.addEventListener('input', () => {
        sendButton.disabled = !input.value.trim();
    });
    
    // Handle enter key
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !sendButton.disabled) {
            handleSend();
        }
    });
    
    // Handle send button click
    sendButton.addEventListener('click', handleSend);
    
    // Handle quick reply buttons
    document.querySelectorAll('.quick-reply-btn').forEach(button => {
        button.addEventListener('click', () => {
            input.value = button.textContent;
            sendButton.disabled = false;
            handleSend();
        });
    });
});
</script>
</body>

</html>